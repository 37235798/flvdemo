!function(g){var I={};function C(A){if(I[A])return I[A].exports;var n=I[A]={i:A,l:!1,exports:{}};return g[A].call(n.exports,n,n.exports,C),n.l=!0,n.exports}C.m=g,C.c=I,C.d=function(g,I,A){C.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:A})},C.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},C.t=function(g,I){if(1&I&&(g=C(g)),8&I)return g;if(4&I&&"object"==typeof g&&g&&g.__esModule)return g;var A=Object.create(null);if(C.r(A),Object.defineProperty(A,"default",{enumerable:!0,value:g}),2&I&&"string"!=typeof g)for(var n in g)C.d(A,n,function(I){return g[I]}.bind(null,n));return A},C.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return C.d(I,"a",I),I},C.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},C.p="",C(C.s=1)}([function(module,exports){eval("exports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n\nexports.homedir = function () {\n\treturn '/'\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3MtYnJvd3NlcmlmeS9icm93c2VyLmpzPzNjNDMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0NBQWtDOztBQUVsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0JBQStCOztBQUUvQiw4QkFBOEI7O0FBRTlCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsNEJBQTRCOztBQUU1Qiw0QkFBNEI7O0FBRTVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxVQUFVOztBQUV6Qiw0QkFBNEI7O0FBRTVCLGdDQUFnQzs7QUFFaEM7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5lbmRpYW5uZXNzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJ0xFJyB9O1xuXG5leHBvcnRzLmhvc3RuYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBsb2NhdGlvbi5ob3N0bmFtZVxuICAgIH1cbiAgICBlbHNlIHJldHVybiAnJztcbn07XG5cbmV4cG9ydHMubG9hZGF2ZyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtdIH07XG5cbmV4cG9ydHMudXB0aW1lID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gMCB9O1xuXG5leHBvcnRzLmZyZWVtZW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIE51bWJlci5NQVhfVkFMVUU7XG59O1xuXG5leHBvcnRzLnRvdGFsbWVtID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBOdW1iZXIuTUFYX1ZBTFVFO1xufTtcblxuZXhwb3J0cy5jcHVzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW10gfTtcblxuZXhwb3J0cy50eXBlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJ0Jyb3dzZXInIH07XG5cbmV4cG9ydHMucmVsZWFzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5hcHBWZXJzaW9uO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG59O1xuXG5leHBvcnRzLm5ldHdvcmtJbnRlcmZhY2VzXG49IGV4cG9ydHMuZ2V0TmV0d29ya0ludGVyZmFjZXNcbj0gZnVuY3Rpb24gKCkgeyByZXR1cm4ge30gfTtcblxuZXhwb3J0cy5hcmNoID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJ2phdmFzY3JpcHQnIH07XG5cbmV4cG9ydHMucGxhdGZvcm0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnYnJvd3NlcicgfTtcblxuZXhwb3J0cy50bXBkaXIgPSBleHBvcnRzLnRtcERpciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJy90bXAnO1xufTtcblxuZXhwb3J0cy5FT0wgPSAnXFxuJztcblxuZXhwb3J0cy5ob21lZGlyID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gJy8nXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/os-browserify/browser.js\nvar browser = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/flvtag.js\n\n\nclass FlvTag {\n    constructor() {\n        this.tagType = -1;\n        this.dataSize = -1;\n        this.Timestamp = -1;\n        this.StreamID = -1;\n        this.body = -1;\n    }\n\n    toString() {\n        let tagType = '';\n        if (this.tagType == 8) {\n            tagType = 'Audio'\n        } else if (this.tagType == 9) {\n            tagType = 'Video'\n        } else if (this.tagType == 18) {\n            tagType = \"scripts\"\n        }\n\n        return `tag:${tagType};\n        dataSize:${this.hexTypeArray2int(this.dataSize)};\n        timestamp:${this.hexTypeArray2int(this.Timestamp)};\n        streamId:${this.hexTypeArray2int(this.StreamID)};`\n    }\n\n    hexTypeArray2int(typeArr) {\n        const arr = []\n        typeArr.forEach(n => {\n            arr.push(n.toString(16).length == 1 ? '0' + n.toString(16) : n.toString(16))\n        })\n        return parseInt(arr.join(''), 16)\n    }\n}\n// CONCATENATED MODULE: ./src/flvparse.js\n\nclass flvparse_FlvParse {\n    constructor() {\n        this.tempUint8 = [];\n        this.arrTag = [];\n        this.index = 0;\n        this.tempArr = [];\n        this._hasAudio = false;\n        this._hasVideo = false;\n    }\n\n    setFlv(uint8) {\n        this.stop = false;\n        this.arrTag = [];\n        this.index = 0;\n        this.tempUint8 = uint8;\n        if (this.tempUint8.length > 13 && this.tempUint8[0] == 70 && this.tempUint8[1] == 76 && this.tempUint8[2] == 86) {\n            this.probe(this.tempUint8.buffer);\n            this.read(9); // 略掉9个字节的flv header tag\n            this.read(4); // 略掉第一个4字节的 tag size\n            this.parse();\n            this.frist = false;\n            return this.offset;\n        } else if (!this.frist) {\n            return this.parse();\n        } else {\n            return this.offset;\n        }\n    }\n\n    probe(buffer) {\n        const data = new Uint8Array(buffer);\n        const mismatch = { match: false };\n\n        if (data[0] !== 0x46 || data[1] !== 0x4C || data[2] !== 0x56 || data[3] !== 0x01) {\n            return mismatch;\n        }\n\n        const hasAudio = ((data[4] & 4) >>> 2) !== 0;\n        const hasVideo = (data[4] & 1) !== 0;\n\n        if (!hasAudio && !hasVideo) {\n            return mismatch;\n        }\n        this._hasAudio = hasAudio;\n        this._hasVideo = hasVideo;\n        return {\n            match: true,\n            hasAudioTrack: hasAudio,\n            hasVideoTrack: hasVideo\n        };\n    }\n\n    /**\n     * 开始解析\n     */\n    parse() {\n\n        while (this.index < this.tempUint8.length && !this.stop) {\n            this.offset = this.index;\n\n            const t = new FlvTag();\n            if (this.tempUint8.length - this.index >= 11) {\n                t.tagType = (this.read(1)[0]); // 取出tag类型\n                t.dataSize = this.read(3); // 取出包体大小\n                t.Timestamp = this.read(4); // 取出解码时间\n                t.StreamID = this.read(3); // 取出stream id\n            } else {\n                this.stop = true;\n                continue;\n            }\n            if (this.tempUint8.length - this.index >= (this.getBodySum(t.dataSize) + 4)) {\n\n                t.body = this.read(this.getBodySum(t.dataSize)); // 取出body\n                if (t.tagType == 9 && this._hasVideo) {\n                    this.arrTag.push(t);\n                }\n                if (t.tagType == 8 && this._hasAudio) {\n                    this.arrTag.push(t);\n                }\n                if (t.tagType == 18) {\n                    if (this.arrTag.length == 0)\n                        this.arrTag.push(t);\n                    else {\n                        console.log('这是截获的自定义数据', t);\n                    }\n                }\n                t.size = this.read(4);\n            } else {\n                this.stop = true;\n                continue;\n            }\n            this.offset = this.index;\n        }\n\n        return this.offset;\n    }\n    read(length) {\n        // let u8a = new Uint8Array(length);\n        // u8a.set(this.tempUint8.subarray(this.index, this.index + length), 0);\n        const u8a = this.tempUint8.slice(this.index, this.index + length);\n        this.index += length;\n        return u8a;\n    }\n\n    getBodySum(arr) {\n        let _str = '';\n        _str += (arr[0].toString(16).length == 1 ? '0' + arr[0].toString(16) : arr[0].toString(16));\n        _str += (arr[1].toString(16).length == 1 ? '0' + arr[1].toString(16) : arr[1].toString(16));\n        _str += (arr[2].toString(16).length == 1 ? '0' + arr[2].toString(16) : arr[2].toString(16));\n        return parseInt(_str, 16);\n    }\n\n    toString() {\n        for (let index = 0; index < this.arrTag.length; index++) {\n            console.log(`tag${index}`, this.arrTag[index].toString());\n        }\n    };\n}\n\n/* harmony default export */ var flvparse = (new flvparse_FlvParse());\n\n// CONCATENATED MODULE: ./src/utils/decodeUTF8.js\n/* eslint-disable */\nfunction decodeUTF8(uint8array) {\n    const out = [];\n    const input = uint8array;\n    let i = 0;\n    const length = uint8array.length;\n\n    while (i < length) {\n        if (input[i] < 0x80) {\n            out.push(String.fromCharCode(input[i]));\n            ++i;\n            continue;\n        } else if (input[i] < 0xC0) {\n            // fallthrough\n        } else if (input[i] < 0xE0) {\n            if (checkContinuation(input, i, 1)) {\n                const ucs4 = (input[i] & 0x1F) << 6 | (input[i + 1] & 0x3F);\n                if (ucs4 >= 0x80) {\n                    out.push(String.fromCharCode(ucs4 & 0xFFFF));\n                    i += 2;\n                    continue;\n                }\n            }\n        } else if (input[i] < 0xF0) {\n            if (checkContinuation(input, i, 2)) {\n                const ucs4 = (input[i] & 0xF) << 12 | (input[i + 1] & 0x3F) << 6 | input[i + 2] & 0x3F;\n                if (ucs4 >= 0x800 && (ucs4 & 0xF800) !== 0xD800) {\n                    out.push(String.fromCharCode(ucs4 & 0xFFFF));\n                    i += 3;\n                    continue;\n                }\n            }\n        } else if (input[i] < 0xF8) {\n            if (checkContinuation(input, i, 3)) {\n                let ucs4 = (input[i] & 0x7) << 18 | (input[i + 1] & 0x3F) << 12 |\n                    (input[i + 2] & 0x3F) << 6 | (input[i + 3] & 0x3F);\n                if (ucs4 > 0x10000 && ucs4 < 0x110000) {\n                    ucs4 -= 0x10000;\n                    out.push(String.fromCharCode((ucs4 >>> 10) | 0xD800));\n                    out.push(String.fromCharCode((ucs4 & 0x3FF) | 0xDC00));\n                    i += 4;\n                    continue;\n                }\n            }\n        }\n        out.push(String.fromCharCode(0xFFFD));\n        ++i;\n    }\n\n    return out.join('');\n}\n\nfunction checkContinuation(uint8array, start, checkLength) {\n    let array = uint8array;\n    if (start + checkLength < array.length) {\n        while (checkLength--) {\n            if ((array[++start] & 0xC0) !== 0x80)\n                return false;\n        }\n        return true;\n    } else {\n        return false;\n    }\n}\n/* harmony default export */ var utils_decodeUTF8 = (decodeUTF8);\n// CONCATENATED MODULE: ./src/flvDemux.js\n\nconst le = (function () {\n    const buf = new ArrayBuffer(2);\n    (new DataView(buf)).setInt16(0, 256, true); // little-endian write\n    return (new Int16Array(buf))[0] === 256; // platform-spec read, if equal then LE\n})();\nclass flvDemux_flvDemux {\n    constructor() {\n    }\n\n    static parseMetaData(arr) {\n        const name = flvDemux_flvDemux.parseScript(arr, 0);\n        const value = flvDemux_flvDemux.parseScript(arr, name.size, arr.length - name.size);\n        // return {}\n        const data = {};\n        data[name.data] = value.data;\n        return data;\n    }\n    static parseVariable(arrayBuffer, dataOffset, dataSize) {\n        return flvDemux_flvDemux.parseObject(arrayBuffer, dataOffset, dataSize);\n    }\n    static parseObject(arrayBuffer, dataOffset, dataSize) {\n\n        const name = flvDemux_flvDemux.parseString(arrayBuffer, dataOffset, dataSize);\n        const value = flvDemux_flvDemux.parseScript(arrayBuffer, dataOffset + name.size);\n        const isObjectEnd = value.objectEnd;\n\n        return {\n            data: {\n                name: name.data,\n                value: value.data\n            },\n            size: value.size,\n            objectEnd: isObjectEnd\n        };\n    }\n    static parseString(arrayBuffer, dataOffset, dataSize) {\n        const v = new DataView(arrayBuffer, dataOffset);\n        const length = v.getUint16(0, !le);\n        let str;\n        if (length > 0) {\n            str = utils_decodeUTF8(new Uint8Array(arrayBuffer, dataOffset + 2, length));\n        } else {\n            str = '';\n        }\n        return {\n            data: str,\n            size: 2 + length\n        };\n    }\n    static parseScript(arr, offset, dataSize) {\n        let dataOffset = offset;\n        const object = {};\n        const uint8 = new Uint8Array(arr);\n        const buffer = uint8.buffer;\n        const dv = new DataView(buffer, 0, dataSize);\n        let value = null;\n        let objectEnd = false;\n        const type = (dv.getUint8(dataOffset));\n        dataOffset += 1;\n\n        switch (type) {\n            case 0: // Number(Double) type\n                value = dv.getFloat64(dataOffset, !le);\n                dataOffset += 8;\n                break;\n            case 1:\n                { // Boolean type\n                    const b = dv.getUint8(dataOffset);\n                    value = !!b;\n                    dataOffset += 1;\n                    break;\n                }\n            case 2:\n                { // String type\n                    // dataOffset += 1;\n                    const amfstr = flvDemux_flvDemux.parseString(buffer, dataOffset);\n                    value = amfstr.data;\n                    dataOffset += amfstr.size;\n                    break;\n                }\n            case 3:\n                { // Object(s) type\n                    value = {};\n                    let terminal = 0; // workaround for malformed Objects which has missing ScriptDataObjectEnd\n                    if ((dv.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {\n                        terminal = 3;\n                    }\n                    while (dataOffset < dataSize - 4) { // 4 === type(UI8) + ScriptDataObjectEnd(UI24)\n                        const amfobj = flvDemux_flvDemux.parseObject(buffer, dataOffset, dataSize - offset - terminal);\n\n                        if (amfobj.objectEnd) { break; }\n                        value[amfobj.data.name] = amfobj.data.value;\n                        // dataOffset += amfobj.size;\n                        dataOffset = amfobj.size;\n                    }\n                    if (dataOffset <= dataSize - 3) {\n                        const marker = v.getUint32(dataOffset - 1, !le) & 0x00FFFFFF;\n                        if (marker === 9) {\n                            dataOffset += 3;\n                        }\n                    }\n                    break;\n                }\n            case 8:\n                { // ECMA array type (Mixed array)\n                    value = {};\n                    // dataOffset += 1;\n                    dataOffset += 4; // ECMAArrayLength(UI32)\n                    let terminal = 0; // workaround for malformed MixedArrays which has missing ScriptDataObjectEnd\n                    if ((dv.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {\n                        terminal = 3;\n                    }\n                    while (dataOffset < dataSize - 8) { // 8 === type(UI8) + ECMAArrayLength(UI32) + ScriptDataVariableEnd(UI24)\n                        const amfvar = flvDemux_flvDemux.parseVariable(buffer, dataOffset);\n\n                        if (amfvar.objectEnd) { break; }\n                        value[amfvar.data.name] = amfvar.data.value;\n                        dataOffset = amfvar.size;\n                    }\n                    if (dataOffset <= dataSize - 3) {\n                        const marker = dv.getUint32(dataOffset - 1, !le) & 0x00FFFFFF;\n                        if (marker === 9) {\n                            dataOffset += 3;\n                        }\n                    }\n                    break;\n                }\n            case 9: // ScriptDataObjectEnd\n                value = undefined;\n                dataOffset = 1;\n                objectEnd = true;\n                break;\n            case 10:\n                { // Strict array type\n                    // ScriptDataValue[n]. NOTE: according to video_file_format_spec_v10_1.pdf\n                    value = [];\n                    const strictArrayLength = dv.getUint32(dataOffset, !le);\n                    dataOffset += 4;\n                    for (let i = 0; i < strictArrayLength; i++) {\n                        const val = flvDemux_flvDemux.parseScript(buffer, dataOffset);\n                        value.push(val.data);\n                        dataOffset = val.size;\n                    }\n                    break;\n                }\n            case 11:\n                { // Date type\n                    const date = flvDemux_flvDemux.parseDate(buffer, dataOffset + 1, dataSize - 1);\n                    value = date.data;\n                    dataOffset += date.size;\n                    break;\n                }\n            case 12:\n                { // Long string type\n                    const amfLongStr = flvDemux_flvDemux.parseString(buffer, dataOffset + 1, dataSize - 1);\n                    value = amfLongStr.data;\n                    dataOffset += amfLongStr.size;\n                    break;\n                }\n            default:\n                // ignore and skip\n                dataOffset = dataSize;\n                console.log('AMF', 'Unsupported AMF value type ' + type);\n        }\n        return {\n            data: value,\n            size: dataOffset,\n        };\n    }\n}\n// CONCATENATED MODULE: ./src/media-info.js\nclass MediaInfo {\n\n    constructor() {\n        this.mimeType = null;\n        this.duration = null;\n\n        this.hasAudio = null;\n        this.hasVideo = null;\n        this.audioCodec = null;\n        this.videoCodec = null;\n        this.audioDataRate = null;\n        this.videoDataRate = null;\n\n        this.audioSampleRate = null;\n        this.audioChannelCount = null;\n\n        this.width = null;\n        this.height = null;\n        this.fps = null;\n        this.profile = null;\n        this.level = null;\n        this.chromaFormat = null;\n        this.sarNum = null;\n        this.sarDen = null;\n\n        this.metadata = null;\n        this.segments = null; // MediaInfo[]\n        this.segmentCount = null;\n        this.hasKeyframesIndex = null;\n        this.keyframesIndex = null;\n    }\n\n    isComplete() {\n        const audioInfoComplete = (this.hasAudio === false) ||\n            (this.hasAudio === true &&\n                this.audioCodec != null &&\n                this.audioSampleRate != null &&\n                this.audioChannelCount != null);\n\n        const videoInfoComplete = (this.hasVideo === false) ||\n            (this.hasVideo === true &&\n                this.videoCodec != null &&\n                this.width != null &&\n                this.height != null &&\n                this.fps != null &&\n                this.profile != null &&\n                this.level != null &&\n                this.chromaFormat != null &&\n                this.sarNum != null &&\n                this.sarDen != null);\n\n        // keyframesIndex may not be present\n        return this.mimeType != null &&\n            this.duration != null &&\n            this.metadata != null &&\n            this.hasKeyframesIndex != null &&\n            audioInfoComplete &&\n            videoInfoComplete;\n    }\n\n    isSeekable() {\n        return this.hasKeyframesIndex === true;\n    }\n}\n\n/* harmony default export */ var media_info = (MediaInfo);\n// CONCATENATED MODULE: ./src/tagdemux.js\n\n\nclass tagdemux_tagDemux {\n\n    constructor() {\n        this.TAG = this.constructor.name;\n\n        this._config = {};\n\n        this._onError = null;\n        this._onMediaInfo = null;\n        this._onTrackMetadata = null;\n        this._onDataAvailable = null;\n\n        this._dataOffset = 0;\n        this._firstParse = true;\n        this._dispatch = false;\n\n        this._hasAudio = false;\n        this._hasVideo = false;\n\n        this._audioInitialMetadataDispatched = false;\n        this._videoInitialMetadataDispatched = false;\n\n        this._mediaInfo = new media_info();\n        this._mediaInfo.hasAudio = this._hasAudio;\n        this._mediaInfo.hasVideo = this._hasVideo;\n        this._metadata = null;\n        this._audioMetadata = null;\n        this._videoMetadata = null;\n\n        this._naluLengthSize = 4;\n        this._timestampBase = 0; // int32, in milliseconds\n        this._timescale = 1000;\n        this._duration = 0; // int32, in milliseconds\n        this._durationOverrided = false;\n        this._referenceFrameRate = {\n            fixed: true,\n            fps: 23.976,\n            fps_num: 23976,\n            fps_den: 1000\n        };\n\n        this._videoTrack = { type: 'video', id: 1, sequenceNumber: 0, addcoefficient: 2, samples: [], length: 0 };\n        this._audioTrack = { type: 'audio', id: 2, sequenceNumber: 1, addcoefficient: 2, samples: [], length: 0 };\n\n        this._littleEndian = (function () {\n            const buf = new ArrayBuffer(2);\n            (new DataView(buf)).setInt16(0, 256, true); // little-endian write\n            return (new Int16Array(buf))[0] === 256; // platform-spec read, if equal then LE\n        })();\n    }\n\n    moof(tags) {\n        for (let i = 0; i < tags.length; i++) {\n            this.parseChunks(tags[i]);\n        }\n\n    }\n\n    parseChunks(flvtag) {\n\n        switch (flvtag.tagType) {\n            case 18: // ScriptDataObject\n                this.parseMetadata(flvtag.body);\n                break;\n        }\n    }\n\n    parseMetadata(arr) {\n        const data = flvDemux_flvDemux.parseMetaData(arr);\n        this._parseScriptData(data);\n\n        console.log(this._mediaInfo, this._mediaInfo.isComplete());\n    }\n\n    _parseScriptData(obj) {\n        const scriptData = obj;\n\n        if (scriptData.hasOwnProperty('onMetaData')) {\n            if (this._metaData) {\n                console.log('found another onMetaData tag!');\n            }\n\n            this._metaData = scriptData;\n\n            const onMetaData = this._metaData.onMetaData;\n\n            if (typeof onMetaData.hasAudio == \"boolean\") {\n                this._hasAudio = onMetaData.hasAudio;\n                this._mediaInfo.hasAudio = this._hasAudio;\n            }\n\n            if (typeof onMetaData.hasVideo == \"boolean\") {\n                this._hasVideo = onMetaData.hasVideo;\n                this._mediaInfo.hasVideo = this._hasVideo;\n            }\n\n            if (typeof onMetaData.audiodatarate == 'number') {\n                this._mediaInfo.audiodatarate = onMetaData.audiodatarate;\n            }\n            if (typeof onMetaData.videodatarate == 'number') {\n                this._mediaInfo.videodatarate = onMetaData.videodatarate;\n            }\n\n            if (typeof onMetaData.width == 'number') {\n                this._mediaInfo.width = onMetaData.width;\n            }\n            if (typeof onMetaData.height == 'number') {\n                this._mediaInfo.height = onMetaData.height;\n            }\n\n            if (typeof onMetaData.duration == 'number') {\n                if (!this._durationOverrided) {\n                    const duration = Math.floor(onMetaData.duration * this._timescale);\n                    this._duration = duration;\n                    this._mediaInfo.duration = duration;\n                }\n            } else {\n                this._mediaInfo.duration = 0;\n            }\n\n            if (typeof onMetaData.framerate == 'number') {\n                const fps_num = Math.floor(onMetaData.framerate * 1000);\n                if (fps_num > 0) {\n                    const fps = fps_num / 1000;\n                    this._referenceFrameRate.fixed = true;\n                    this._referenceFrameRate.fps = fps;\n                    this._referenceFrameRate.fps_num = fps_num;\n                    this._referenceFrameRate.fps_den = 1000;\n                    this._mediaInfo.fps = fps;\n                }\n            }\n\n            if (typeof onMetaData.keyframes == 'number') {\n                this._mediaInfo.hasKeyframesIndex = true;\n                const keyframes = onMetaData.keyframes;\n                keyframes.times = onMetaData.times;\n                keyframes.filepositions = onMetaData.filepositions;\n                this._mediaInfo.keyframesIndex = this._parseKeyframesIndex(keyframes);\n                onMetaData.keyframes = null; // keyframes has been extracted, remove it\n            } else {\n                this._mediaInfo.hasKeyframesIndex = false;\n            }\n\n            this._dispatch = false;\n\n            this._mediaInfo.metadata = onMetaData;\n\n            return this._mediaInfo;\n        }\n    }\n\n}\n\n/* harmony default export */ var tagdemux = (new tagdemux_tagDemux());\n// CONCATENATED MODULE: ./src/index.js\n\n\n\nvar dropbox = document.querySelector('body div');\n\ndropbox.addEventListener('dragover', function (e) {\n    e.stopPropagation();\n    e.preventDefault();\n}, false);\n\ndropbox.addEventListener(\"drop\", function (e) {\n    e.stopPropagation();\n    e.preventDefault();\n    var reader = new FileReader();\n    reader.addEventListener('load', processflv, false);\n    reader.readAsArrayBuffer(e.dataTransfer.files[0]);\n}, false);\n\nfunction processflv(e) {\n    var buffer = e.target.result;\n    var unit8 = new Uint8Array(buffer);\n    flvparse.setFlv(unit8);\n    if (flvparse.arrTag[0].type != 18) {\n        if (this.error) this.error(new Error('without metadata tag'));\n    }\n    if (flvparse.arrTag.length > 0) {\n        tagdemux.hasAudio = this.hasAudio = flvparse._hasAudio;\n        tagdemux.hasVideo = this.hasVideo = flvparse._hasVideo;\n        tagdemux.moof(flvparse.arrTag)\n    }\n\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZmx2dGFnLmpzPzE3NjciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZsdnBhcnNlLmpzPzkxMmUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2RlY29kZVVURjguanM/YWQ5YiIsIndlYnBhY2s6Ly8vLi9zcmMvZmx2RGVtdXguanM/ODAzNSIsIndlYnBhY2s6Ly8vLi9zcmMvbWVkaWEtaW5mby5qcz80MzJlIiwid2VicGFjazovLy8uL3NyYy90YWdkZW11eC5qcz83NTRkIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcz9iNjM1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUEwQjs7QUFFWDtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUEsc0JBQXNCO0FBQ3RCLG1CQUFtQjtBQUNuQixvQkFBb0I7QUFDcEIsbUJBQW1CLHNDQUFzQztBQUN6RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQzs7QUNsQzZCO0FBQzdCLE1BQU0saUJBQVE7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwQkFBMEI7O0FBRTFCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSwwQkFBMEIsTUFBRztBQUM3QjtBQUNBLDhDQUE4QztBQUM5QywwQ0FBMEM7QUFD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QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUMsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVlLGlEQUFJLGlCQUFRLEVBQUUsRTs7QUMzSk87QUFDQTs7QUFFcEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLElBQUksUUFBUTtBQUNaLFFBQVEsUUFBUTtBQUNoQjtBQUNBO0FBQ0EsUUFBUSxRQUFRO0FBQ2hCLFFBQVEsUUFBUSw0QkFBNEIsUUFBUTtBQUNwRCxRQUFRLFFBQVEsNEJBQTRCLFFBQVE7QUFDcEQsUUFBUSxRQUFRLE1BQU0sUUFBUTtBQUM5Qjs7QUFFQSIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHlwZSB9IGZyb20gXCJvc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGbHZUYWcge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnRhZ1R5cGUgPSAtMTtcbiAgICAgICAgdGhpcy5kYXRhU2l6ZSA9IC0xO1xuICAgICAgICB0aGlzLlRpbWVzdGFtcCA9IC0xO1xuICAgICAgICB0aGlzLlN0cmVhbUlEID0gLTE7XG4gICAgICAgIHRoaXMuYm9keSA9IC0xO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBsZXQgdGFnVHlwZSA9ICcnO1xuICAgICAgICBpZiAodGhpcy50YWdUeXBlID09IDgpIHtcbiAgICAgICAgICAgIHRhZ1R5cGUgPSAnQXVkaW8nXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy50YWdUeXBlID09IDkpIHtcbiAgICAgICAgICAgIHRhZ1R5cGUgPSAnVmlkZW8nXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy50YWdUeXBlID09IDE4KSB7XG4gICAgICAgICAgICB0YWdUeXBlID0gXCJzY3JpcHRzXCJcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBgdGFnOiR7dGFnVHlwZX07XG4gICAgICAgIGRhdGFTaXplOiR7dGhpcy5oZXhUeXBlQXJyYXkyaW50KHRoaXMuZGF0YVNpemUpfTtcbiAgICAgICAgdGltZXN0YW1wOiR7dGhpcy5oZXhUeXBlQXJyYXkyaW50KHRoaXMuVGltZXN0YW1wKX07XG4gICAgICAgIHN0cmVhbUlkOiR7dGhpcy5oZXhUeXBlQXJyYXkyaW50KHRoaXMuU3RyZWFtSUQpfTtgXG4gICAgfVxuXG4gICAgaGV4VHlwZUFycmF5MmludCh0eXBlQXJyKSB7XG4gICAgICAgIGNvbnN0IGFyciA9IFtdXG4gICAgICAgIHR5cGVBcnIuZm9yRWFjaChuID0+IHtcbiAgICAgICAgICAgIGFyci5wdXNoKG4udG9TdHJpbmcoMTYpLmxlbmd0aCA9PSAxID8gJzAnICsgbi50b1N0cmluZygxNikgOiBuLnRvU3RyaW5nKDE2KSlcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KGFyci5qb2luKCcnKSwgMTYpXG4gICAgfVxufSIsImltcG9ydCB0YWcgZnJvbSAnLi9mbHZ0YWcuanMnXG5jbGFzcyBGbHZQYXJzZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudGVtcFVpbnQ4ID0gW107XG4gICAgICAgIHRoaXMuYXJyVGFnID0gW107XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgICAgICB0aGlzLnRlbXBBcnIgPSBbXTtcbiAgICAgICAgdGhpcy5faGFzQXVkaW8gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faGFzVmlkZW8gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBzZXRGbHYodWludDgpIHtcbiAgICAgICAgdGhpcy5zdG9wID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYXJyVGFnID0gW107XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgICAgICB0aGlzLnRlbXBVaW50OCA9IHVpbnQ4O1xuICAgICAgICBpZiAodGhpcy50ZW1wVWludDgubGVuZ3RoID4gMTMgJiYgdGhpcy50ZW1wVWludDhbMF0gPT0gNzAgJiYgdGhpcy50ZW1wVWludDhbMV0gPT0gNzYgJiYgdGhpcy50ZW1wVWludDhbMl0gPT0gODYpIHtcbiAgICAgICAgICAgIHRoaXMucHJvYmUodGhpcy50ZW1wVWludDguYnVmZmVyKTtcbiAgICAgICAgICAgIHRoaXMucmVhZCg5KTsgLy8g55Wl5o6JOeS4quWtl+iKgueahGZsdiBoZWFkZXIgdGFnXG4gICAgICAgICAgICB0aGlzLnJlYWQoNCk7IC8vIOeVpeaOieesrOS4gOS4qjTlrZfoioLnmoQgdGFnIHNpemVcbiAgICAgICAgICAgIHRoaXMucGFyc2UoKTtcbiAgICAgICAgICAgIHRoaXMuZnJpc3QgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9mZnNldDtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5mcmlzdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2UoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9mZnNldDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb2JlKGJ1ZmZlcikge1xuICAgICAgICBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICAgICAgY29uc3QgbWlzbWF0Y2ggPSB7IG1hdGNoOiBmYWxzZSB9O1xuXG4gICAgICAgIGlmIChkYXRhWzBdICE9PSAweDQ2IHx8IGRhdGFbMV0gIT09IDB4NEMgfHwgZGF0YVsyXSAhPT0gMHg1NiB8fCBkYXRhWzNdICE9PSAweDAxKSB7XG4gICAgICAgICAgICByZXR1cm4gbWlzbWF0Y2g7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBoYXNBdWRpbyA9ICgoZGF0YVs0XSAmIDQpID4+PiAyKSAhPT0gMDtcbiAgICAgICAgY29uc3QgaGFzVmlkZW8gPSAoZGF0YVs0XSAmIDEpICE9PSAwO1xuXG4gICAgICAgIGlmICghaGFzQXVkaW8gJiYgIWhhc1ZpZGVvKSB7XG4gICAgICAgICAgICByZXR1cm4gbWlzbWF0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faGFzQXVkaW8gPSBoYXNBdWRpbztcbiAgICAgICAgdGhpcy5faGFzVmlkZW8gPSBoYXNWaWRlbztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1hdGNoOiB0cnVlLFxuICAgICAgICAgICAgaGFzQXVkaW9UcmFjazogaGFzQXVkaW8sXG4gICAgICAgICAgICBoYXNWaWRlb1RyYWNrOiBoYXNWaWRlb1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOW8gOWni+ino+aekFxuICAgICAqL1xuICAgIHBhcnNlKCkge1xuXG4gICAgICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZW1wVWludDgubGVuZ3RoICYmICF0aGlzLnN0b3ApIHtcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gdGhpcy5pbmRleDtcblxuICAgICAgICAgICAgY29uc3QgdCA9IG5ldyB0YWcoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnRlbXBVaW50OC5sZW5ndGggLSB0aGlzLmluZGV4ID49IDExKSB7XG4gICAgICAgICAgICAgICAgdC50YWdUeXBlID0gKHRoaXMucmVhZCgxKVswXSk7IC8vIOWPluWHunRhZ+exu+Wei1xuICAgICAgICAgICAgICAgIHQuZGF0YVNpemUgPSB0aGlzLnJlYWQoMyk7IC8vIOWPluWHuuWMheS9k+Wkp+Wwj1xuICAgICAgICAgICAgICAgIHQuVGltZXN0YW1wID0gdGhpcy5yZWFkKDQpOyAvLyDlj5blh7rop6PnoIHml7bpl7RcbiAgICAgICAgICAgICAgICB0LlN0cmVhbUlEID0gdGhpcy5yZWFkKDMpOyAvLyDlj5blh7pzdHJlYW0gaWRcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnRlbXBVaW50OC5sZW5ndGggLSB0aGlzLmluZGV4ID49ICh0aGlzLmdldEJvZHlTdW0odC5kYXRhU2l6ZSkgKyA0KSkge1xuXG4gICAgICAgICAgICAgICAgdC5ib2R5ID0gdGhpcy5yZWFkKHRoaXMuZ2V0Qm9keVN1bSh0LmRhdGFTaXplKSk7IC8vIOWPluWHumJvZHlcbiAgICAgICAgICAgICAgICBpZiAodC50YWdUeXBlID09IDkgJiYgdGhpcy5faGFzVmlkZW8pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcnJUYWcucHVzaCh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHQudGFnVHlwZSA9PSA4ICYmIHRoaXMuX2hhc0F1ZGlvKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXJyVGFnLnB1c2godCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0LnRhZ1R5cGUgPT0gMTgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYXJyVGFnLmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcnJUYWcucHVzaCh0KTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygn6L+Z5piv5oiq6I6355qE6Ieq5a6a5LmJ5pWw5o2uJywgdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdC5zaXplID0gdGhpcy5yZWFkKDQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3AgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSB0aGlzLmluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0O1xuICAgIH1cbiAgICByZWFkKGxlbmd0aCkge1xuICAgICAgICAvLyBsZXQgdThhID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICAgICAgLy8gdThhLnNldCh0aGlzLnRlbXBVaW50OC5zdWJhcnJheSh0aGlzLmluZGV4LCB0aGlzLmluZGV4ICsgbGVuZ3RoKSwgMCk7XG4gICAgICAgIGNvbnN0IHU4YSA9IHRoaXMudGVtcFVpbnQ4LnNsaWNlKHRoaXMuaW5kZXgsIHRoaXMuaW5kZXggKyBsZW5ndGgpO1xuICAgICAgICB0aGlzLmluZGV4ICs9IGxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHU4YTtcbiAgICB9XG5cbiAgICBnZXRCb2R5U3VtKGFycikge1xuICAgICAgICBsZXQgX3N0ciA9ICcnO1xuICAgICAgICBfc3RyICs9IChhcnJbMF0udG9TdHJpbmcoMTYpLmxlbmd0aCA9PSAxID8gJzAnICsgYXJyWzBdLnRvU3RyaW5nKDE2KSA6IGFyclswXS50b1N0cmluZygxNikpO1xuICAgICAgICBfc3RyICs9IChhcnJbMV0udG9TdHJpbmcoMTYpLmxlbmd0aCA9PSAxID8gJzAnICsgYXJyWzFdLnRvU3RyaW5nKDE2KSA6IGFyclsxXS50b1N0cmluZygxNikpO1xuICAgICAgICBfc3RyICs9IChhcnJbMl0udG9TdHJpbmcoMTYpLmxlbmd0aCA9PSAxID8gJzAnICsgYXJyWzJdLnRvU3RyaW5nKDE2KSA6IGFyclsyXS50b1N0cmluZygxNikpO1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoX3N0ciwgMTYpO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5hcnJUYWcubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgdGFnJHtpbmRleH1gLCB0aGlzLmFyclRhZ1tpbmRleF0udG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgRmx2UGFyc2UoKTtcbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG5mdW5jdGlvbiBkZWNvZGVVVEY4KHVpbnQ4YXJyYXkpIHtcbiAgICBjb25zdCBvdXQgPSBbXTtcbiAgICBjb25zdCBpbnB1dCA9IHVpbnQ4YXJyYXk7XG4gICAgbGV0IGkgPSAwO1xuICAgIGNvbnN0IGxlbmd0aCA9IHVpbnQ4YXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICAgICAgaWYgKGlucHV0W2ldIDwgMHg4MCkge1xuICAgICAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShpbnB1dFtpXSkpO1xuICAgICAgICAgICAgKytpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXRbaV0gPCAweEMwKSB7XG4gICAgICAgICAgICAvLyBmYWxsdGhyb3VnaFxuICAgICAgICB9IGVsc2UgaWYgKGlucHV0W2ldIDwgMHhFMCkge1xuICAgICAgICAgICAgaWYgKGNoZWNrQ29udGludWF0aW9uKGlucHV0LCBpLCAxKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVjczQgPSAoaW5wdXRbaV0gJiAweDFGKSA8PCA2IHwgKGlucHV0W2kgKyAxXSAmIDB4M0YpO1xuICAgICAgICAgICAgICAgIGlmICh1Y3M0ID49IDB4ODApIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSh1Y3M0ICYgMHhGRkZGKSk7XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGlucHV0W2ldIDwgMHhGMCkge1xuICAgICAgICAgICAgaWYgKGNoZWNrQ29udGludWF0aW9uKGlucHV0LCBpLCAyKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVjczQgPSAoaW5wdXRbaV0gJiAweEYpIDw8IDEyIHwgKGlucHV0W2kgKyAxXSAmIDB4M0YpIDw8IDYgfCBpbnB1dFtpICsgMl0gJiAweDNGO1xuICAgICAgICAgICAgICAgIGlmICh1Y3M0ID49IDB4ODAwICYmICh1Y3M0ICYgMHhGODAwKSAhPT0gMHhEODAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUodWNzNCAmIDB4RkZGRikpO1xuICAgICAgICAgICAgICAgICAgICBpICs9IDM7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChpbnB1dFtpXSA8IDB4RjgpIHtcbiAgICAgICAgICAgIGlmIChjaGVja0NvbnRpbnVhdGlvbihpbnB1dCwgaSwgMykpIHtcbiAgICAgICAgICAgICAgICBsZXQgdWNzNCA9IChpbnB1dFtpXSAmIDB4NykgPDwgMTggfCAoaW5wdXRbaSArIDFdICYgMHgzRikgPDwgMTIgfFxuICAgICAgICAgICAgICAgICAgICAoaW5wdXRbaSArIDJdICYgMHgzRikgPDwgNiB8IChpbnB1dFtpICsgM10gJiAweDNGKTtcbiAgICAgICAgICAgICAgICBpZiAodWNzNCA+IDB4MTAwMDAgJiYgdWNzNCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHVjczQgLT0gMHgxMDAwMDtcbiAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSgodWNzNCA+Pj4gMTApIHwgMHhEODAwKSk7XG4gICAgICAgICAgICAgICAgICAgIG91dC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoKHVjczQgJiAweDNGRikgfCAweERDMDApKTtcbiAgICAgICAgICAgICAgICAgICAgaSArPSA0O1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb3V0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSgweEZGRkQpKTtcbiAgICAgICAgKytpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuam9pbignJyk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrQ29udGludWF0aW9uKHVpbnQ4YXJyYXksIHN0YXJ0LCBjaGVja0xlbmd0aCkge1xuICAgIGxldCBhcnJheSA9IHVpbnQ4YXJyYXk7XG4gICAgaWYgKHN0YXJ0ICsgY2hlY2tMZW5ndGggPCBhcnJheS5sZW5ndGgpIHtcbiAgICAgICAgd2hpbGUgKGNoZWNrTGVuZ3RoLS0pIHtcbiAgICAgICAgICAgIGlmICgoYXJyYXlbKytzdGFydF0gJiAweEMwKSAhPT0gMHg4MClcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGRlY29kZVVURjg7IiwiaW1wb3J0IGRlY29kZVVURjggZnJvbSAnLi91dGlscy9kZWNvZGVVVEY4LmpzJztcbmNvbnN0IGxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBidWYgPSBuZXcgQXJyYXlCdWZmZXIoMik7XG4gICAgKG5ldyBEYXRhVmlldyhidWYpKS5zZXRJbnQxNigwLCAyNTYsIHRydWUpOyAvLyBsaXR0bGUtZW5kaWFuIHdyaXRlXG4gICAgcmV0dXJuIChuZXcgSW50MTZBcnJheShidWYpKVswXSA9PT0gMjU2OyAvLyBwbGF0Zm9ybS1zcGVjIHJlYWQsIGlmIGVxdWFsIHRoZW4gTEVcbn0pKCk7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBmbHZEZW11eCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgfVxuXG4gICAgc3RhdGljIHBhcnNlTWV0YURhdGEoYXJyKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBmbHZEZW11eC5wYXJzZVNjcmlwdChhcnIsIDApO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGZsdkRlbXV4LnBhcnNlU2NyaXB0KGFyciwgbmFtZS5zaXplLCBhcnIubGVuZ3RoIC0gbmFtZS5zaXplKTtcbiAgICAgICAgLy8gcmV0dXJuIHt9XG4gICAgICAgIGNvbnN0IGRhdGEgPSB7fTtcbiAgICAgICAgZGF0YVtuYW1lLmRhdGFdID0gdmFsdWUuZGF0YTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIHN0YXRpYyBwYXJzZVZhcmlhYmxlKGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0LCBkYXRhU2l6ZSkge1xuICAgICAgICByZXR1cm4gZmx2RGVtdXgucGFyc2VPYmplY3QoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQsIGRhdGFTaXplKTtcbiAgICB9XG4gICAgc3RhdGljIHBhcnNlT2JqZWN0KGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0LCBkYXRhU2l6ZSkge1xuXG4gICAgICAgIGNvbnN0IG5hbWUgPSBmbHZEZW11eC5wYXJzZVN0cmluZyhhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCwgZGF0YVNpemUpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGZsdkRlbXV4LnBhcnNlU2NyaXB0KGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0ICsgbmFtZS5zaXplKTtcbiAgICAgICAgY29uc3QgaXNPYmplY3RFbmQgPSB2YWx1ZS5vYmplY3RFbmQ7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLmRhdGEsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLmRhdGFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzaXplOiB2YWx1ZS5zaXplLFxuICAgICAgICAgICAgb2JqZWN0RW5kOiBpc09iamVjdEVuZFxuICAgICAgICB9O1xuICAgIH1cbiAgICBzdGF0aWMgcGFyc2VTdHJpbmcoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQsIGRhdGFTaXplKSB7XG4gICAgICAgIGNvbnN0IHYgPSBuZXcgRGF0YVZpZXcoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQpO1xuICAgICAgICBjb25zdCBsZW5ndGggPSB2LmdldFVpbnQxNigwLCAhbGUpO1xuICAgICAgICBsZXQgc3RyO1xuICAgICAgICBpZiAobGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc3RyID0gZGVjb2RlVVRGOChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCArIDIsIGxlbmd0aCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IHN0cixcbiAgICAgICAgICAgIHNpemU6IDIgKyBsZW5ndGhcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc3RhdGljIHBhcnNlU2NyaXB0KGFyciwgb2Zmc2V0LCBkYXRhU2l6ZSkge1xuICAgICAgICBsZXQgZGF0YU9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgY29uc3Qgb2JqZWN0ID0ge307XG4gICAgICAgIGNvbnN0IHVpbnQ4ID0gbmV3IFVpbnQ4QXJyYXkoYXJyKTtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gdWludDguYnVmZmVyO1xuICAgICAgICBjb25zdCBkdiA9IG5ldyBEYXRhVmlldyhidWZmZXIsIDAsIGRhdGFTaXplKTtcbiAgICAgICAgbGV0IHZhbHVlID0gbnVsbDtcbiAgICAgICAgbGV0IG9iamVjdEVuZCA9IGZhbHNlO1xuICAgICAgICBjb25zdCB0eXBlID0gKGR2LmdldFVpbnQ4KGRhdGFPZmZzZXQpKTtcbiAgICAgICAgZGF0YU9mZnNldCArPSAxO1xuXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSAwOiAvLyBOdW1iZXIoRG91YmxlKSB0eXBlXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBkdi5nZXRGbG9hdDY0KGRhdGFPZmZzZXQsICFsZSk7XG4gICAgICAgICAgICAgICAgZGF0YU9mZnNldCArPSA4O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHsgLy8gQm9vbGVhbiB0eXBlXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGIgPSBkdi5nZXRVaW50OChkYXRhT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAhIWI7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFPZmZzZXQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHsgLy8gU3RyaW5nIHR5cGVcbiAgICAgICAgICAgICAgICAgICAgLy8gZGF0YU9mZnNldCArPSAxO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbWZzdHIgPSBmbHZEZW11eC5wYXJzZVN0cmluZyhidWZmZXIsIGRhdGFPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGFtZnN0ci5kYXRhO1xuICAgICAgICAgICAgICAgICAgICBkYXRhT2Zmc2V0ICs9IGFtZnN0ci5zaXplO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgeyAvLyBPYmplY3QocykgdHlwZVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGVybWluYWwgPSAwOyAvLyB3b3JrYXJvdW5kIGZvciBtYWxmb3JtZWQgT2JqZWN0cyB3aGljaCBoYXMgbWlzc2luZyBTY3JpcHREYXRhT2JqZWN0RW5kXG4gICAgICAgICAgICAgICAgICAgIGlmICgoZHYuZ2V0VWludDMyKGRhdGFTaXplIC0gNCwgIWxlKSAmIDB4MDBGRkZGRkYpID09PSA5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXJtaW5hbCA9IDM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGRhdGFPZmZzZXQgPCBkYXRhU2l6ZSAtIDQpIHsgLy8gNCA9PT0gdHlwZShVSTgpICsgU2NyaXB0RGF0YU9iamVjdEVuZChVSTI0KVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW1mb2JqID0gZmx2RGVtdXgucGFyc2VPYmplY3QoYnVmZmVyLCBkYXRhT2Zmc2V0LCBkYXRhU2l6ZSAtIG9mZnNldCAtIHRlcm1pbmFsKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFtZm9iai5vYmplY3RFbmQpIHsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlW2FtZm9iai5kYXRhLm5hbWVdID0gYW1mb2JqLmRhdGEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkYXRhT2Zmc2V0ICs9IGFtZm9iai5zaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YU9mZnNldCA9IGFtZm9iai5zaXplO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhT2Zmc2V0IDw9IGRhdGFTaXplIC0gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFya2VyID0gdi5nZXRVaW50MzIoZGF0YU9mZnNldCAtIDEsICFsZSkgJiAweDAwRkZGRkZGO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmtlciA9PT0gOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFPZmZzZXQgKz0gMztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgeyAvLyBFQ01BIGFycmF5IHR5cGUgKE1peGVkIGFycmF5KVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAvLyBkYXRhT2Zmc2V0ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFPZmZzZXQgKz0gNDsgLy8gRUNNQUFycmF5TGVuZ3RoKFVJMzIpXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZXJtaW5hbCA9IDA7IC8vIHdvcmthcm91bmQgZm9yIG1hbGZvcm1lZCBNaXhlZEFycmF5cyB3aGljaCBoYXMgbWlzc2luZyBTY3JpcHREYXRhT2JqZWN0RW5kXG4gICAgICAgICAgICAgICAgICAgIGlmICgoZHYuZ2V0VWludDMyKGRhdGFTaXplIC0gNCwgIWxlKSAmIDB4MDBGRkZGRkYpID09PSA5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXJtaW5hbCA9IDM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGRhdGFPZmZzZXQgPCBkYXRhU2l6ZSAtIDgpIHsgLy8gOCA9PT0gdHlwZShVSTgpICsgRUNNQUFycmF5TGVuZ3RoKFVJMzIpICsgU2NyaXB0RGF0YVZhcmlhYmxlRW5kKFVJMjQpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbWZ2YXIgPSBmbHZEZW11eC5wYXJzZVZhcmlhYmxlKGJ1ZmZlciwgZGF0YU9mZnNldCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbWZ2YXIub2JqZWN0RW5kKSB7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVthbWZ2YXIuZGF0YS5uYW1lXSA9IGFtZnZhci5kYXRhLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YU9mZnNldCA9IGFtZnZhci5zaXplO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhT2Zmc2V0IDw9IGRhdGFTaXplIC0gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFya2VyID0gZHYuZ2V0VWludDMyKGRhdGFPZmZzZXQgLSAxLCAhbGUpICYgMHgwMEZGRkZGRjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXJrZXIgPT09IDkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhT2Zmc2V0ICs9IDM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSA5OiAvLyBTY3JpcHREYXRhT2JqZWN0RW5kXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgZGF0YU9mZnNldCA9IDE7XG4gICAgICAgICAgICAgICAgb2JqZWN0RW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgeyAvLyBTdHJpY3QgYXJyYXkgdHlwZVxuICAgICAgICAgICAgICAgICAgICAvLyBTY3JpcHREYXRhVmFsdWVbbl0uIE5PVEU6IGFjY29yZGluZyB0byB2aWRlb19maWxlX2Zvcm1hdF9zcGVjX3YxMF8xLnBkZlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJpY3RBcnJheUxlbmd0aCA9IGR2LmdldFVpbnQzMihkYXRhT2Zmc2V0LCAhbGUpO1xuICAgICAgICAgICAgICAgICAgICBkYXRhT2Zmc2V0ICs9IDQ7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyaWN0QXJyYXlMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsID0gZmx2RGVtdXgucGFyc2VTY3JpcHQoYnVmZmVyLCBkYXRhT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLnB1c2godmFsLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YU9mZnNldCA9IHZhbC5zaXplO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgeyAvLyBEYXRlIHR5cGVcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0ZSA9IGZsdkRlbXV4LnBhcnNlRGF0ZShidWZmZXIsIGRhdGFPZmZzZXQgKyAxLCBkYXRhU2l6ZSAtIDEpO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGRhdGUuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YU9mZnNldCArPSBkYXRlLnNpemU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgICAgeyAvLyBMb25nIHN0cmluZyB0eXBlXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFtZkxvbmdTdHIgPSBmbHZEZW11eC5wYXJzZVN0cmluZyhidWZmZXIsIGRhdGFPZmZzZXQgKyAxLCBkYXRhU2l6ZSAtIDEpO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGFtZkxvbmdTdHIuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YU9mZnNldCArPSBhbWZMb25nU3RyLnNpemU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gaWdub3JlIGFuZCBza2lwXG4gICAgICAgICAgICAgICAgZGF0YU9mZnNldCA9IGRhdGFTaXplO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdBTUYnLCAnVW5zdXBwb3J0ZWQgQU1GIHZhbHVlIHR5cGUgJyArIHR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhOiB2YWx1ZSxcbiAgICAgICAgICAgIHNpemU6IGRhdGFPZmZzZXQsXG4gICAgICAgIH07XG4gICAgfVxufSIsImNsYXNzIE1lZGlhSW5mbyB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5taW1lVHlwZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBudWxsO1xuXG4gICAgICAgIHRoaXMuaGFzQXVkaW8gPSBudWxsO1xuICAgICAgICB0aGlzLmhhc1ZpZGVvID0gbnVsbDtcbiAgICAgICAgdGhpcy5hdWRpb0NvZGVjID0gbnVsbDtcbiAgICAgICAgdGhpcy52aWRlb0NvZGVjID0gbnVsbDtcbiAgICAgICAgdGhpcy5hdWRpb0RhdGFSYXRlID0gbnVsbDtcbiAgICAgICAgdGhpcy52aWRlb0RhdGFSYXRlID0gbnVsbDtcblxuICAgICAgICB0aGlzLmF1ZGlvU2FtcGxlUmF0ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuYXVkaW9DaGFubmVsQ291bnQgPSBudWxsO1xuXG4gICAgICAgIHRoaXMud2lkdGggPSBudWxsO1xuICAgICAgICB0aGlzLmhlaWdodCA9IG51bGw7XG4gICAgICAgIHRoaXMuZnBzID0gbnVsbDtcbiAgICAgICAgdGhpcy5wcm9maWxlID0gbnVsbDtcbiAgICAgICAgdGhpcy5sZXZlbCA9IG51bGw7XG4gICAgICAgIHRoaXMuY2hyb21hRm9ybWF0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5zYXJOdW0gPSBudWxsO1xuICAgICAgICB0aGlzLnNhckRlbiA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5tZXRhZGF0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuc2VnbWVudHMgPSBudWxsOyAvLyBNZWRpYUluZm9bXVxuICAgICAgICB0aGlzLnNlZ21lbnRDb3VudCA9IG51bGw7XG4gICAgICAgIHRoaXMuaGFzS2V5ZnJhbWVzSW5kZXggPSBudWxsO1xuICAgICAgICB0aGlzLmtleWZyYW1lc0luZGV4ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpc0NvbXBsZXRlKCkge1xuICAgICAgICBjb25zdCBhdWRpb0luZm9Db21wbGV0ZSA9ICh0aGlzLmhhc0F1ZGlvID09PSBmYWxzZSkgfHxcbiAgICAgICAgICAgICh0aGlzLmhhc0F1ZGlvID09PSB0cnVlICYmXG4gICAgICAgICAgICAgICAgdGhpcy5hdWRpb0NvZGVjICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvU2FtcGxlUmF0ZSAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgdGhpcy5hdWRpb0NoYW5uZWxDb3VudCAhPSBudWxsKTtcblxuICAgICAgICBjb25zdCB2aWRlb0luZm9Db21wbGV0ZSA9ICh0aGlzLmhhc1ZpZGVvID09PSBmYWxzZSkgfHxcbiAgICAgICAgICAgICh0aGlzLmhhc1ZpZGVvID09PSB0cnVlICYmXG4gICAgICAgICAgICAgICAgdGhpcy52aWRlb0NvZGVjICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICB0aGlzLndpZHRoICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmhlaWdodCAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgdGhpcy5mcHMgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIHRoaXMucHJvZmlsZSAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgdGhpcy5sZXZlbCAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgdGhpcy5jaHJvbWFGb3JtYXQgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIHRoaXMuc2FyTnVtICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnNhckRlbiAhPSBudWxsKTtcblxuICAgICAgICAvLyBrZXlmcmFtZXNJbmRleCBtYXkgbm90IGJlIHByZXNlbnRcbiAgICAgICAgcmV0dXJuIHRoaXMubWltZVR5cGUgIT0gbnVsbCAmJlxuICAgICAgICAgICAgdGhpcy5kdXJhdGlvbiAhPSBudWxsICYmXG4gICAgICAgICAgICB0aGlzLm1ldGFkYXRhICE9IG51bGwgJiZcbiAgICAgICAgICAgIHRoaXMuaGFzS2V5ZnJhbWVzSW5kZXggIT0gbnVsbCAmJlxuICAgICAgICAgICAgYXVkaW9JbmZvQ29tcGxldGUgJiZcbiAgICAgICAgICAgIHZpZGVvSW5mb0NvbXBsZXRlO1xuICAgIH1cblxuICAgIGlzU2Vla2FibGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc0tleWZyYW1lc0luZGV4ID09PSB0cnVlO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTWVkaWFJbmZvOyIsImltcG9ydCBmbHZEZW11eCBmcm9tIFwiLi9mbHZEZW11eC5qc1wiO1xuaW1wb3J0IG1lZGlhaW5mbyBmcm9tICcuL21lZGlhLWluZm8nO1xuY2xhc3MgdGFnRGVtdXgge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuVEFHID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuXG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IHt9O1xuXG4gICAgICAgIHRoaXMuX29uRXJyb3IgPSBudWxsO1xuICAgICAgICB0aGlzLl9vbk1lZGlhSW5mbyA9IG51bGw7XG4gICAgICAgIHRoaXMuX29uVHJhY2tNZXRhZGF0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuX29uRGF0YUF2YWlsYWJsZSA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5fZGF0YU9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMuX2ZpcnN0UGFyc2UgPSB0cnVlO1xuICAgICAgICB0aGlzLl9kaXNwYXRjaCA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuX2hhc0F1ZGlvID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2hhc1ZpZGVvID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5fYXVkaW9Jbml0aWFsTWV0YWRhdGFEaXNwYXRjaGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3ZpZGVvSW5pdGlhbE1ldGFkYXRhRGlzcGF0Y2hlZCA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuX21lZGlhSW5mbyA9IG5ldyBtZWRpYWluZm8oKTtcbiAgICAgICAgdGhpcy5fbWVkaWFJbmZvLmhhc0F1ZGlvID0gdGhpcy5faGFzQXVkaW87XG4gICAgICAgIHRoaXMuX21lZGlhSW5mby5oYXNWaWRlbyA9IHRoaXMuX2hhc1ZpZGVvO1xuICAgICAgICB0aGlzLl9tZXRhZGF0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2F1ZGlvTWV0YWRhdGEgPSBudWxsO1xuICAgICAgICB0aGlzLl92aWRlb01ldGFkYXRhID0gbnVsbDtcblxuICAgICAgICB0aGlzLl9uYWx1TGVuZ3RoU2l6ZSA9IDQ7XG4gICAgICAgIHRoaXMuX3RpbWVzdGFtcEJhc2UgPSAwOyAvLyBpbnQzMiwgaW4gbWlsbGlzZWNvbmRzXG4gICAgICAgIHRoaXMuX3RpbWVzY2FsZSA9IDEwMDA7XG4gICAgICAgIHRoaXMuX2R1cmF0aW9uID0gMDsgLy8gaW50MzIsIGluIG1pbGxpc2Vjb25kc1xuICAgICAgICB0aGlzLl9kdXJhdGlvbk92ZXJyaWRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9yZWZlcmVuY2VGcmFtZVJhdGUgPSB7XG4gICAgICAgICAgICBmaXhlZDogdHJ1ZSxcbiAgICAgICAgICAgIGZwczogMjMuOTc2LFxuICAgICAgICAgICAgZnBzX251bTogMjM5NzYsXG4gICAgICAgICAgICBmcHNfZGVuOiAxMDAwXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fdmlkZW9UcmFjayA9IHsgdHlwZTogJ3ZpZGVvJywgaWQ6IDEsIHNlcXVlbmNlTnVtYmVyOiAwLCBhZGRjb2VmZmljaWVudDogMiwgc2FtcGxlczogW10sIGxlbmd0aDogMCB9O1xuICAgICAgICB0aGlzLl9hdWRpb1RyYWNrID0geyB0eXBlOiAnYXVkaW8nLCBpZDogMiwgc2VxdWVuY2VOdW1iZXI6IDEsIGFkZGNvZWZmaWNpZW50OiAyLCBzYW1wbGVzOiBbXSwgbGVuZ3RoOiAwIH07XG5cbiAgICAgICAgdGhpcy5fbGl0dGxlRW5kaWFuID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcigyKTtcbiAgICAgICAgICAgIChuZXcgRGF0YVZpZXcoYnVmKSkuc2V0SW50MTYoMCwgMjU2LCB0cnVlKTsgLy8gbGl0dGxlLWVuZGlhbiB3cml0ZVxuICAgICAgICAgICAgcmV0dXJuIChuZXcgSW50MTZBcnJheShidWYpKVswXSA9PT0gMjU2OyAvLyBwbGF0Zm9ybS1zcGVjIHJlYWQsIGlmIGVxdWFsIHRoZW4gTEVcbiAgICAgICAgfSkoKTtcbiAgICB9XG5cbiAgICBtb29mKHRhZ3MpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YWdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnBhcnNlQ2h1bmtzKHRhZ3NbaV0pO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBwYXJzZUNodW5rcyhmbHZ0YWcpIHtcblxuICAgICAgICBzd2l0Y2ggKGZsdnRhZy50YWdUeXBlKSB7XG4gICAgICAgICAgICBjYXNlIDE4OiAvLyBTY3JpcHREYXRhT2JqZWN0XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJzZU1ldGFkYXRhKGZsdnRhZy5ib2R5KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHBhcnNlTWV0YWRhdGEoYXJyKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBmbHZEZW11eC5wYXJzZU1ldGFEYXRhKGFycik7XG4gICAgICAgIHRoaXMuX3BhcnNlU2NyaXB0RGF0YShkYXRhKTtcblxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLl9tZWRpYUluZm8sIHRoaXMuX21lZGlhSW5mby5pc0NvbXBsZXRlKCkpO1xuICAgIH1cblxuICAgIF9wYXJzZVNjcmlwdERhdGEob2JqKSB7XG4gICAgICAgIGNvbnN0IHNjcmlwdERhdGEgPSBvYmo7XG5cbiAgICAgICAgaWYgKHNjcmlwdERhdGEuaGFzT3duUHJvcGVydHkoJ29uTWV0YURhdGEnKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX21ldGFEYXRhKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2ZvdW5kIGFub3RoZXIgb25NZXRhRGF0YSB0YWchJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX21ldGFEYXRhID0gc2NyaXB0RGF0YTtcblxuICAgICAgICAgICAgY29uc3Qgb25NZXRhRGF0YSA9IHRoaXMuX21ldGFEYXRhLm9uTWV0YURhdGE7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb25NZXRhRGF0YS5oYXNBdWRpbyA9PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhc0F1ZGlvID0gb25NZXRhRGF0YS5oYXNBdWRpbztcbiAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYUluZm8uaGFzQXVkaW8gPSB0aGlzLl9oYXNBdWRpbztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvbk1ldGFEYXRhLmhhc1ZpZGVvID09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faGFzVmlkZW8gPSBvbk1ldGFEYXRhLmhhc1ZpZGVvO1xuICAgICAgICAgICAgICAgIHRoaXMuX21lZGlhSW5mby5oYXNWaWRlbyA9IHRoaXMuX2hhc1ZpZGVvO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9uTWV0YURhdGEuYXVkaW9kYXRhcmF0ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX21lZGlhSW5mby5hdWRpb2RhdGFyYXRlID0gb25NZXRhRGF0YS5hdWRpb2RhdGFyYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvbk1ldGFEYXRhLnZpZGVvZGF0YXJhdGUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYUluZm8udmlkZW9kYXRhcmF0ZSA9IG9uTWV0YURhdGEudmlkZW9kYXRhcmF0ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvbk1ldGFEYXRhLndpZHRoID09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWVkaWFJbmZvLndpZHRoID0gb25NZXRhRGF0YS53aWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb25NZXRhRGF0YS5oZWlnaHQgPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYUluZm8uaGVpZ2h0ID0gb25NZXRhRGF0YS5oZWlnaHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb25NZXRhRGF0YS5kdXJhdGlvbiA9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fZHVyYXRpb25PdmVycmlkZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZHVyYXRpb24gPSBNYXRoLmZsb29yKG9uTWV0YURhdGEuZHVyYXRpb24gKiB0aGlzLl90aW1lc2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYUluZm8uZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX21lZGlhSW5mby5kdXJhdGlvbiA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb25NZXRhRGF0YS5mcmFtZXJhdGUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmcHNfbnVtID0gTWF0aC5mbG9vcihvbk1ldGFEYXRhLmZyYW1lcmF0ZSAqIDEwMDApO1xuICAgICAgICAgICAgICAgIGlmIChmcHNfbnVtID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmcHMgPSBmcHNfbnVtIC8gMTAwMDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVmZXJlbmNlRnJhbWVSYXRlLmZpeGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVmZXJlbmNlRnJhbWVSYXRlLmZwcyA9IGZwcztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVmZXJlbmNlRnJhbWVSYXRlLmZwc19udW0gPSBmcHNfbnVtO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWZlcmVuY2VGcmFtZVJhdGUuZnBzX2RlbiA9IDEwMDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21lZGlhSW5mby5mcHMgPSBmcHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9uTWV0YURhdGEua2V5ZnJhbWVzID09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWVkaWFJbmZvLmhhc0tleWZyYW1lc0luZGV4ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXlmcmFtZXMgPSBvbk1ldGFEYXRhLmtleWZyYW1lcztcbiAgICAgICAgICAgICAgICBrZXlmcmFtZXMudGltZXMgPSBvbk1ldGFEYXRhLnRpbWVzO1xuICAgICAgICAgICAgICAgIGtleWZyYW1lcy5maWxlcG9zaXRpb25zID0gb25NZXRhRGF0YS5maWxlcG9zaXRpb25zO1xuICAgICAgICAgICAgICAgIHRoaXMuX21lZGlhSW5mby5rZXlmcmFtZXNJbmRleCA9IHRoaXMuX3BhcnNlS2V5ZnJhbWVzSW5kZXgoa2V5ZnJhbWVzKTtcbiAgICAgICAgICAgICAgICBvbk1ldGFEYXRhLmtleWZyYW1lcyA9IG51bGw7IC8vIGtleWZyYW1lcyBoYXMgYmVlbiBleHRyYWN0ZWQsIHJlbW92ZSBpdFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYUluZm8uaGFzS2V5ZnJhbWVzSW5kZXggPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fZGlzcGF0Y2ggPSBmYWxzZTtcblxuICAgICAgICAgICAgdGhpcy5fbWVkaWFJbmZvLm1ldGFkYXRhID0gb25NZXRhRGF0YTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21lZGlhSW5mbztcbiAgICAgICAgfVxuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgdGFnRGVtdXgoKTsiLCJpbXBvcnQgZmx2cGFyc2UgZnJvbSAnLi9mbHZwYXJzZS5qcydcbmltcG9ydCB0YWdkZW11eCBmcm9tICcuL3RhZ2RlbXV4LmpzJ1xuXG52YXIgZHJvcGJveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHkgZGl2Jyk7XG5cbmRyb3Bib3guYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCBmdW5jdGlvbiAoZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xufSwgZmFsc2UpO1xuXG5kcm9wYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJkcm9wXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgcmVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBwcm9jZXNzZmx2LCBmYWxzZSk7XG4gICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGUuZGF0YVRyYW5zZmVyLmZpbGVzWzBdKTtcbn0sIGZhbHNlKTtcblxuZnVuY3Rpb24gcHJvY2Vzc2ZsdihlKSB7XG4gICAgdmFyIGJ1ZmZlciA9IGUudGFyZ2V0LnJlc3VsdDtcbiAgICB2YXIgdW5pdDggPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgIGZsdnBhcnNlLnNldEZsdih1bml0OCk7XG4gICAgaWYgKGZsdnBhcnNlLmFyclRhZ1swXS50eXBlICE9IDE4KSB7XG4gICAgICAgIGlmICh0aGlzLmVycm9yKSB0aGlzLmVycm9yKG5ldyBFcnJvcignd2l0aG91dCBtZXRhZGF0YSB0YWcnKSk7XG4gICAgfVxuICAgIGlmIChmbHZwYXJzZS5hcnJUYWcubGVuZ3RoID4gMCkge1xuICAgICAgICB0YWdkZW11eC5oYXNBdWRpbyA9IHRoaXMuaGFzQXVkaW8gPSBmbHZwYXJzZS5faGFzQXVkaW87XG4gICAgICAgIHRhZ2RlbXV4Lmhhc1ZpZGVvID0gdGhpcy5oYXNWaWRlbyA9IGZsdnBhcnNlLl9oYXNWaWRlbztcbiAgICAgICAgdGFnZGVtdXgubW9vZihmbHZwYXJzZS5hcnJUYWcpXG4gICAgfVxuXG59XG5cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n")}]);